{"version":3,"sources":["js/libs/oxo.js"],"names":["window","oxo","width","innerWidth","height","innerHeight","animation","move","element","direction","distance","allowOutside","console","error","position","getPosition","newPosition","computeNewPosition","elPos","getBoundingClientRect","x","y","setPosition","Object","assign","style","transform","match","RegExp","values","map","value","parseInt","replace","translation","getMovableElement","movableElement","document","querySelector","speed","getAttribute","moveElementWithArrowKeys","interval","pressed","pixels","Math","round","log","addEventListener","event","key","indexOf","toLowerCase","push","setInterval","requestAnimationFrame","length","inputs","getDirectionFromPressedKeys","filter","clearInterval","elements","createElement","params","type","class","split","forEach","className","classList","add","styles","appendElement","appendTo","hostSelector","host","body","appendChild","onLeaveScreen","action","once","observer","IntersectionObserver","entries","entry","isIntersecting","disconnect","root","rootMargin","threshold","observe","onLeaveScreenOnce","onCollisionWithElement","target","colliding","elementsAreColliding","onCollisionWithElementOnce","element1","element2","element1Pos","element2Pos","keys","enter","space","left","up","right","down","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","z","keysListeners","listenKey","code","bind","listenKeys","listenArrowKeys","listenKeyOnce","cancelKeyListener","cancelKeysListeners","cancelKeysListener","cancelArrowKeysListeners","listenAllKeys","listener","keyCode","dir","every","dirPart","player","addToScore","points","setScore","getScore","localStorage","getItem","removeFromScore","newScore","max","setItem","refreshScore","scoreElement","getElement","innerText","screens","currentScreen","loadScreen","name","fetch","then","response","ok","text","html","innerHTML","setAttribute","call","getCurrentScreen","utils","getRandomNumber","min","floor","random","init","message","attribute"],"mappings":"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","file":"oxo.54691a36.map","sourceRoot":"..\\src","sourcesContent":["window.oxo = {\n  oxo: this,\n  width: window.innerWidth,\n  height: window.innerHeight,\n\n  animation: {\n    /**\n     * Modify the transform property of an element to make it move\n     * @param {HTMLElement} element - The element to move\n     * @param {string} direction - The direction\n     * @param {number} distance - The number of pixels for the move\n     * @param {allowOutside} boolean - If true, the element can go off limits\n     * @return {Object} - An object containing the updated position x and y\n     */\n    move(element, direction, distance, allowOutside) {\n      if (!element) {\n        console.error('The element to move was not found');\n        return;\n      }\n\n      if (!distance) {\n        console.error('You must provide a distance to move an element');\n        return;\n      }\n\n      var position = oxo.animation.getPosition(element);\n      var newPosition = oxo.animation.computeNewPosition(\n        position,\n        direction,\n        distance\n      );\n\n      if (!allowOutside) {\n        var elPos = element.getBoundingClientRect();\n\n        if (\n          newPosition.x + elPos.width > oxo.width ||\n          newPosition.x < 0 ||\n          newPosition.y + elPos.height > oxo.height ||\n          newPosition.y < 0\n        ) {\n          return;\n        }\n      }\n\n      oxo.animation.setPosition(element, newPosition);\n\n      return newPosition;\n    },\n\n    /**\n     * Modify a position object depending on direction and distance\n     * @param {Object} position - An object containing the x and y position\n     * @param {string} direction - The direction in which to move\n     * @param {number} distance - The distance to move\n     */\n    computeNewPosition(position, direction, distance) {\n      var newPosition = Object.assign({}, position);\n\n      switch (direction) {\n        case 'left':\n          newPosition.x -= distance;\n          break;\n        case 'left-up':\n          newPosition.y -= distance;\n          newPosition.x -= distance;\n          break;\n        case 'up':\n          newPosition.y -= distance;\n          break;\n        case 'right-up':\n          newPosition.y -= distance;\n          newPosition.x += distance;\n          break;\n        case 'right':\n          newPosition.x += distance;\n          break;\n        case 'right-down':\n          newPosition.x += distance;\n          newPosition.y += distance;\n          break;\n        case 'down':\n          newPosition.y += distance;\n          break;\n        case 'left-down':\n          newPosition.y += distance;\n          newPosition.x -= distance;\n          break;\n        default:\n          console.error(\n            'The direction provided (' + direction + ') is not valid'\n          );\n          return;\n      }\n\n      return newPosition;\n    },\n\n    /**\n     * Get the values of the translate property for the given element\n     * @param {HTMLElement} element - The element\n     * @return {Object} An object containing the x and the y position\n     */\n    getPosition(element) {\n      var position = element.style.transform.match(\n        new RegExp(/translate\\(.+\\)/)\n      );\n\n      if (position) {\n        var values = position[0].match(/-?\\d+/g).map(value => parseInt(value));\n        return {\n          x: values[0],\n          y: values[1],\n        };\n      } else {\n        return { x: 0, y: 0 };\n      }\n    },\n\n    /**\n     * Set the translate property of the given element\n     * @param {HTMLElement} element - The element to move\n     * @param {Object} position - An object containing the x and y values\n     * @return {string} - The updated transform property\n     */\n    setPosition(element, position) {\n      var transform = element.style.transform.replace(/translate\\(.+\\)/, '');\n\n      var translation = 'translate(' + position.x + 'px, ' + position.y + 'px)';\n\n      return (element.style.transform = transform + translation);\n    },\n\n    /**\n     * Search for an element that can be moved and call the adequate function\n     * @return {HTMLElement} the element moved\n     */\n    getMovableElement() {\n      var movableElement = document.querySelector('[data-oxo-movable]');\n\n      if (movableElement) {\n        var speed = movableElement.getAttribute('data-oxo-speed');\n        speed = speed ? speed : 10;\n        oxo.animation.moveElementWithArrowKeys(movableElement, speed);\n\n        return movableElement;\n      }\n    },\n\n    /**\n     * Move an element when the user press the arrow keys\n     * @param {HTMLElement} element - The element to move\n     * @param {number} speed - The speed of the movement\n     */\n    moveElementWithArrowKeys(element, speed) {\n      var interval;\n      var pressed = [];\n      var pixels = speed > 100 ? Math.round(speed / 100) : 1;\n      console.log(pixels);\n\n      document.addEventListener('keydown', function(event) {\n        if (event.key.indexOf('Arrow') === 0) {\n          var direction = event.key.replace('Arrow', '').toLowerCase();\n\n          if (pressed.indexOf(direction) === -1) {\n            pressed.push(direction);\n\n            if (!interval) {\n              interval = setInterval(function() {\n                window.requestAnimationFrame(function() {\n                  if (pressed.length) {\n                    oxo.animation.move(\n                      element,\n                      oxo.inputs.getDirectionFromPressedKeys(pressed),\n                      pixels,\n                      false\n                    );\n                  }\n                });\n              }, 100 / speed);\n            }\n          }\n        }\n      });\n\n      document.addEventListener('keyup', function(event) {\n        if (event.key.indexOf('Arrow') === 0) {\n          var direction = event.key.replace('Arrow', '').toLowerCase();\n\n          pressed = pressed.filter(key => key !== direction);\n          if (!pressed.length) {\n            clearInterval(interval);\n            interval = null;\n          }\n        }\n      });\n    },\n  },\n\n  elements: {\n    /**\n     * Create an HTML element\n     * @param {*} params - An object containing the element parameters\n     * @return {HTMLElement} The created element\n     */\n    createElement(params) {\n      var element = document.createElement(params.type ? params.type : 'div');\n\n      if (params.class) {\n        params.class.split(' ').forEach(function(className) {\n          element.classList.add(className);\n        });\n      }\n\n      if (params.styles) {\n        for (style in params.styles) {\n          element.style[style] = params.styles[style];\n        }\n      }\n\n      oxo.elements.appendElement(element, params.appendTo);\n\n      return element;\n    },\n\n    /**\n     * Append an element inside another one\n     * @param {HTMLElement} element - The element to append\n     * @param {string} hostSelector - The string to select the host element\n     */\n    appendElement(element, hostSelector) {\n      var host = hostSelector\n        ? document.querySelector(hostSelector)\n        : document.body;\n\n      if (!host) {\n        console.error('No element was found for selector ', +hostSelector);\n        return;\n      }\n\n      host.appendChild(element);\n    },\n\n    /**\n     * Execute an action when the given element collides with the border\n     * @param {HTMLElement} element - The element to observe\n     * @param {Function} action - The action to execute\n     * @param {boolean} once - If true, the action will be executed only once\n     * @return {IntersectionObserver} - The observer\n     */\n    onLeaveScreen(element, action, once) {\n      var observer = new IntersectionObserver(\n        function(entries) {\n          entries.forEach(function(entry) {\n            if (!entry.isIntersecting) {\n              action();\n\n              if (once) {\n                observer.disconnect();\n              }\n            }\n          });\n        },\n        {\n          root: null,\n          rootMargin: '0px',\n          threshold: 1.0,\n        }\n      );\n      observer.observe(element);\n\n      return observer;\n    },\n\n    /**\n     * Execute an action once the given element collides with the border\n     * @param {HTMLElement} element - The element to observe\n     * @param {Function} action - The action to execute\n     * @return {IntersectionObserver} - The observer\n     */\n    onLeaveScreenOnce(element, action) {\n      return oxo.elements.onLeaveScreen(element, action, true);\n    },\n\n    /**\n     * Execute an action when two element collides\n     * @param {HTMLElement} element - The element to observe\n     * @param {HTMLElement} target - The element to collide with\n     * @param {Function} action - The action to execute\n     * @param {boolean} once - If true, the action is executed only once\n     * @return {Interval} - The timer used for checking\n     */\n    onCollisionWithElement(element, target, action, once) {\n      var colliding = false;\n\n      var interval = setInterval(function() {\n        if (oxo.elements.elementsAreColliding(element, target)) {\n          if (!colliding) {\n            action();\n            colliding = true;\n\n            if (once) {\n              clearInterval(interval);\n            }\n          }\n        } else {\n          colliding = false;\n        }\n      }, 10);\n\n      return interval;\n    },\n\n    /**\n     * Execute an action once when two element collides\n     * @param {HTMLElement} element - The element to observe\n     * @param {HTMLElement} target - The element to collide with\n     * @param {Function} action - The action to execute\n     * @return {Interval} - The timer used for checking\n     */\n    onCollisionWithElementOnce(element, target, action) {\n      return oxo.elements.onCollisionWithElement(element, target, action, true);\n    },\n\n    /**\n     * Test if two elements are in collision\n     * @param {HTMLElement} element1 - The first element\n     * @param {HTMLElement} element2 - The second element\n     */\n    elementsAreColliding(element1, element2) {\n      var element1Pos = element1.getBoundingClientRect();\n      var element2Pos = element2.getBoundingClientRect();\n\n      return (\n        element1Pos.x < element2Pos.x + element2Pos.width &&\n        element1Pos.x + element1Pos.width > element2Pos.x &&\n        element1Pos.y < element2Pos.y + element2Pos.height &&\n        element1Pos.height + element1Pos.y > element2Pos.y\n      );\n    },\n  },\n\n  inputs: {\n    keys: {\n      enter: 13,\n      space: 32,\n      left: 37,\n      up: 38,\n      right: 39,\n      down: 40,\n      a: 65,\n      b: 66,\n      c: 67,\n      d: 68,\n      e: 69,\n      f: 70,\n      g: 71,\n      h: 72,\n      i: 73,\n      j: 74,\n      k: 75,\n      l: 76,\n      m: 77,\n      n: 78,\n      o: 79,\n      p: 80,\n      q: 81,\n      r: 82,\n      s: 83,\n      t: 84,\n      u: 85,\n      v: 86,\n      w: 87,\n      x: 88,\n      y: 89,\n      z: 90,\n    },\n    keysListeners: {},\n\n    /**\n     * Execute the given action each time the given key is pressed\n     * @param {string} key - The key to press to trigger the action\n     * @param {Function} action - The function that will be executed\n     * @param {boolean} once - If true, the action will be executed only once\n     */\n    listenKey(key, action, once) {\n      if (!once) {\n        once = false;\n      }\n\n      var code = oxo.inputs.keys[key];\n\n      if (!code) {\n        console.error('The key \"' + code + '\" cannot be found');\n        return;\n      }\n\n      oxo.inputs.keysListeners[code] = {\n        action: action.bind(this, key),\n        once: once,\n      };\n    },\n\n    /**\n     * Execute the given action each time one of the given key is pressed\n     * @param {Array<string>} keys - The keys that should trigger the action\n     * @param {Function} action - The action to execute\n     */\n    listenKeys(keys, action) {\n      keys.forEach(function(key) {\n        oxo.inputs.listenKey(key, action);\n      });\n    },\n\n    /**\n     * Execute the given action each time an arrow key is pressed\n     * @param {Function} action - The action to execute\n     */\n    listenArrowKeys(action) {\n      oxo.inputs.listenKeys(['left', 'up', 'right', 'down'], action);\n    },\n\n    /**\n     * Execute the given action the next time the given key is pressed\n     * @param {string} key - The key to press to trigger the action\n     * @param {Function} action - The function that will be executed\n     * */\n    listenKeyOnce(key, action) {\n      oxo.inputs.listenKey(key, action, true);\n    },\n\n    /**\n     * Cancel the listener for the given key\n     * @param {string} key - The key to stop listening to\n     */\n    cancelKeyListener(key) {\n      delete oxo.inputs.keysListeners[oxo.inputs.keys[key]];\n    },\n\n    /**\n     * Cancel the listeners for several keys\n     * @param {Array<string>} - The keys to stop listening to\n     */\n    cancelKeysListeners(keys) {\n      keys.forEach(function(key) {\n        oxo.inputs.cancelKeysListener(key);\n      });\n    },\n\n    /** Cancel the listening of arrow keys */\n    cancelArrowKeysListeners() {\n      oxo.inputs.cancelKeysListener(['left', 'up', 'right', 'down']);\n    },\n\n    /**\n     * This method will be executed on initialization to listen all the keys\n     */\n    listenAllKeys() {\n      document.addEventListener('keydown', function(event) {\n        listener = oxo.inputs.keysListeners[event.keyCode];\n        if (listener) {\n          listener.action();\n\n          if (listener.once) {\n            delete oxo.inputs.keysListeners[event.keyCode];\n          }\n        }\n      });\n    },\n\n    /**\n     * Get the direction by combining the differents keys pressed\n     * @param {Array<string>} pressed - The direction currently pressed\n     * @return {string} the direction\n     */\n    getDirectionFromPressedKeys(pressed) {\n      var direction = pressed[0];\n\n      ['left-up', 'left-down', 'right-up', 'right-down'].forEach(function(dir) {\n        if (\n          dir.split('-').every(function(dirPart) {\n            return pressed.indexOf(dirPart) > -1;\n          })\n        ) {\n          direction = dir;\n        }\n      });\n\n      return direction;\n    },\n  },\n\n  player: {\n    /**\n     * Add one or several points to the score\n     * @param {number} points - The number of points to add\n     * @return {number} The new score\n     */\n    addToScore(points) {\n      oxo.log('Add ' + points + ' points to the score');\n\n      return oxo.player.setScore(oxo.player.getScore() + points);\n    },\n\n    /**\n     * Get the score\n     * @return {number} The score\n     */\n    getScore() {\n      return parseInt(localStorage.getItem('score'));\n    },\n\n    /**\n     * Remove one or several points from the score\n     * @param {number} points - The number of points to remove\n     * @return {number} The new score\n     */\n    removeFromScore(points) {\n      var newScore = Math.max(0, oxo.player.getScore() - points);\n      oxo.log('Remove ' + points + ' points from the score');\n\n      return oxo.player.setScore(newScore);\n    },\n\n    /**\n     * Set the score\n     * @param {number} points - The score\n     * @return {number} The score\n     */\n    setScore(points) {\n      localStorage.setItem('score', points);\n      oxo.log('New score is ' + points);\n\n      oxo.player.refreshScore();\n\n      return points;\n    },\n\n    /**\n     * Refresh the score display\n     */\n    refreshScore() {\n      var scoreElement = oxo.getElement('score');\n\n      if (scoreElement) {\n        scoreElement.innerText = oxo.player.getScore();\n      }\n    },\n  },\n\n  screens: {\n    currentScreen: '',\n    /**\n     * Load a new screen (and add matching class to the body)\n     * @param {string} name - The name of the html file for the screen to load\n     * @param {Function} action - The function to execute after loading\n     * @return {Promise} - The fetch promise\n     */\n    loadScreen(name, action) {\n      return fetch('../../screens/' + name + '.html').then(function(response) {\n        if (response.ok) {\n          response.text().then(function(html) {\n            document.body.innerHTML = html;\n            document.body.setAttribute('class', name);\n            oxo.log('Load screen ' + name);\n            oxo.player.refreshScore();\n            oxo.animation.getMovableElement();\n\n            if (action) {\n              action.call();\n            }\n          });\n        }\n      });\n    },\n\n    /**\n     * Get the name of the current screen\n     * @return {string} the current screen\n     */\n    getCurrentScreen() {\n      return oxo.screens.currentScreen;\n    },\n  },\n\n  utils: {\n    /**\n     * Get a random number between two limits\n     * @param {number} min - The min number\n     * @param {number} max - The max number\n     * @return {number} - The random number\n     */\n    getRandomNumber(min, max) {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    },\n  },\n\n  /**\n   * A function that will be run when oxo is called in order to init the game\n   */\n  init() {\n    oxo.screens.loadScreen('home');\n    oxo.inputs.listenAllKeys();\n    oxo.player.setScore(0);\n  },\n\n  /**\n   * Pretty logger for oxo events\n   * @param {string} message - The information to log\n   */\n  log(message) {\n    console.log('%c OXO: ' + message, 'background-color: gold; padding: 5px');\n  },\n\n  /**\n   * Find an element with an oxo data attribute in the DOM\n   * @param {string} attribute - The data attribute of the element (oxo-data-*)\n   */\n  getElement(attribute) {\n    return document.querySelector('[data-oxo-' + attribute + ']');\n  },\n};\n\nwindow.oxo.init();\n"]}